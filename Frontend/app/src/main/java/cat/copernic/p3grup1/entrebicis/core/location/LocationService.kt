package cat.copernic.p3grup1.entrebicis.core.location

import android.Manifest
import android.app.Notification
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.Service
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.location.Location
import android.os.Build
import android.os.Handler
import android.os.IBinder
import android.os.Looper
import android.util.Log
import androidx.annotation.RequiresApi
import androidx.core.app.NotificationCompat
import androidx.core.content.ContextCompat
import cat.copernic.p3grup1.entrebicis.core.network.RetrofitClient
import cat.copernic.p3grup1.entrebicis.core.utils.LogRutaUtils
import cat.copernic.p3grup1.entrebicis.route.data.repositories.RouteRepo
import cat.copernic.p3grup1.entrebicis.route.data.sources.remote.PuntGpsDto
import cat.copernic.p3grup1.entrebicis.route.data.sources.remote.RouteApi
import com.google.android.gms.location.FusedLocationProviderClient
import com.google.android.gms.location.LocationCallback
import com.google.android.gms.location.LocationRequest
import com.google.android.gms.location.LocationResult
import com.google.android.gms.location.LocationServices
import com.google.android.gms.location.Priority
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch

/**
 * Servei en segon pla encarregat de capturar la localitzaci√≥ GPS de l‚Äôusuari
 * i enviar-la peri√≤dicament al backend mentre una ruta est√† activa.
 * Finalitza autom√†ticament la ruta si detecta inactivitat prolongada.
 */
@RequiresApi(Build.VERSION_CODES.O)
class LocationService : Service() {

    private lateinit var fusedLocationClient: FusedLocationProviderClient
    private lateinit var locationCallback: LocationCallback
    private lateinit var routeRepo: RouteRepo

    private var tempsMaximAturadaMillis: Long = 0L
    private var lastMovementTimestamp: Long = System.currentTimeMillis()
    private var rutaActiva: Boolean = true
    private var lastKnownLocation: Location = Location("init").apply {
        latitude = 0.0
        longitude = 0.0
    }
    private var intervalUpdateMs: Long = 5000L
    private var distanciaMinima: Float = 10f
    private var pointsDiscarded = 0

    private val handler = Handler(Looper.getMainLooper())
    private val checkInactivityRunnable = object : Runnable {
        override fun run() {
            if (rutaActiva) {
                val currentTime = System.currentTimeMillis()
                if ((currentTime - lastMovementTimestamp) > tempsMaximAturadaMillis) {
                    finalizarRutaPerInactivitat()
                } else {
                    handler.postDelayed(this, 5_000L)
                }
            }
        }
    }

    override fun onBind(intent: Intent?): IBinder? = null

    /**
     * S'executa quan el servei es crea per primera vegada.
     * Inicialitza els components de localitzaci√≥, canal de notificaci√≥
     * i comen√ßa a escoltar ubicacions despr√©s d'obtenir els par√†metres del backend.
     */
    override fun onCreate() {
        super.onCreate()

        // Inicializar repo y cliente
        routeRepo = RouteRepo(RetrofitClient.getInstance(applicationContext).create(RouteApi::class.java))
        fusedLocationClient = LocationServices.getFusedLocationProviderClient(this)

        createNotificationChannel()
        startForeground(1, buildNotification())

        LogRutaUtils.appendLog(applicationContext, "Ruta iniciada autom√†ticament pel sistema")

        // Inicializamos el callback de ubicaci√≥n
        locationCallback = object : LocationCallback() {
            override fun onLocationResult(result: LocationResult) {
                for (location in result.locations) {
                    handleNewLocation(location)
                }
            }
        }

        // üîÅ Obtener par√°metro "temps_maxim_aturada" antes de iniciar ubicaci√≥n
        CoroutineScope(Dispatchers.IO).launch {
            routeRepo.getTempsMaximAturada().onSuccess { minuts ->
                tempsMaximAturadaMillis = minuts * 60_000L

                // üîÑ Obtenir par√†metres GPS
                routeRepo.getGpsParams().onSuccess { (interval, dist) ->
                    intervalUpdateMs = interval
                    distanciaMinima = dist
                    Log.d("GPS_PARAM", "Interval: $interval ms, Dist√†ncia m√≠nima: $dist m")
                }.onFailure {
                    Log.w("GPS_PARAM", "Error obtenint par√†metres GPS, usant per defecte")
                }
                startLocationUpdates() // solo iniciar si tenemos el valor
                handler.postDelayed(checkInactivityRunnable, 5_000L)
                Log.d("RUTA", "Temps m√†xim aturat rebut: $minuts minuts")
            }.onFailure {
                Log.e("RUTA", "‚ùå No s'ha pogut obtenir el par√†metre de temps m√†xim. Servei detingut.")
                stopSelf() // cancelamos si no se puede obtener
            }
        }
    }

    /**
     * Inicia les actualitzacions de localitzaci√≥ segons els par√†metres configurats
     * de precisi√≥ i interval. Requereix permisos de localitzaci√≥ atorgats.
     */
    private fun startLocationUpdates() {
        val locationRequest = LocationRequest.Builder(
            Priority.PRIORITY_HIGH_ACCURACY,
            intervalUpdateMs
        ).build()

        if (ContextCompat.checkSelfPermission(
                this,
                Manifest.permission.ACCESS_FINE_LOCATION
            ) == PackageManager.PERMISSION_GRANTED
        ) {
            fusedLocationClient.requestLocationUpdates(
                locationRequest,
                locationCallback,
                Looper.getMainLooper()
            )
        }
    }

    /**
     * Gestiona cada nova localitzaci√≥ rebuda pel sistema.
     * Ignora ubicacions amb baixa precisi√≥ o punts inicials, i envia nom√©s
     * aquells que superen la dist√†ncia m√≠nima configurada.
     *
     * @param location Ubicaci√≥ GPS recent detectada.
     */
    private fun handleNewLocation(location: Location) {
        if (location.accuracy > 20) {
            Log.d("GPS", "Ignorant punt per baixa precisi√≥: ${location.accuracy}m")
            return
        }

        if (pointsDiscarded < 3) {
            pointsDiscarded++
            Log.d("GPS", "Ignorant punt inicial $pointsDiscarded")
            return
        }

        val currentTime = System.currentTimeMillis()
        val distanceMoved = location.distanceTo(lastKnownLocation)

        // Si se ha movido m√°s de 10m, se considera movimiento
        if (distanceMoved > distanciaMinima) {
            lastMovementTimestamp = currentTime
            val punt = PuntGpsDto(
                latitud = location.latitude,
                longitud = location.longitude,
                temps = currentTime
            )
            CoroutineScope(Dispatchers.IO).launch {
                routeRepo.enviarPunt(punt)
            }
        }
        lastKnownLocation = location
    }

    /**
     * Finalitza autom√†ticament la ruta per inactivitat (temps sense moviment superat),
     * notifica al backend i atura el servei.
     */
    private fun finalizarRutaPerInactivitat() {
        rutaActiva = false
        Log.d("RUTA", "Ruta finalitzada autom√†ticament per aturada. Temps quiet superat.")
        LogRutaUtils.appendLog(applicationContext, "Ruta finalitzada autom√†ticament per aturada. Temps quiet superat.")

        CoroutineScope(Dispatchers.IO).launch {
            routeRepo.finalitzarRuta()
            Log.d("RUTA", "Ruta finalitzada al backend amb √®xit")
        }

        sendFinalizationBroadcast()
        stopSelf()
    }

    /**
     * Crea una notificaci√≥ persistent que mostra que la ruta est√† en marxa.
     * √âs necess√†ria per mantenir el servei actiu en primer pla.
     *
     * @return Notificaci√≥ constru√Øda per mostrar a l‚Äôusuari.
     */
    private fun buildNotification(): Notification {
        return NotificationCompat.Builder(this, "route_channel")
            .setContentTitle("Ruta en marxa")
            .setContentText("Capturant localitzaci√≥ cada 10 segons")
            .setSmallIcon(android.R.drawable.ic_menu_mylocation)
            .build()
    }

    /**
     * Crea el canal de notificaci√≥ necessari per mostrar notificacions
     * a dispositius amb Android O o superior.
     */
    private fun createNotificationChannel() {
        val channel = NotificationChannel(
            "route_channel",
            "Seguiment de ruta",
            NotificationManager.IMPORTANCE_LOW
        )
        val manager = getSystemService(NotificationManager::class.java)
        manager.createNotificationChannel(channel)
    }

    /**
     * S'executa quan el servei √©s destru√Øt, per exemple, quan la ruta finalitza o l'app es tanca.
     * Finalitza la ruta si encara est√† activa i allibera recursos.
     */
    override fun onDestroy() {
        super.onDestroy()
        if (rutaActiva) {
            Log.d("LocationService", "üî• App cerrada: finalitzant ruta activa")
            finalizarRutaPerInactivitat()
        }
        rutaActiva = false
        handler.removeCallbacks(checkInactivityRunnable)
        fusedLocationClient.removeLocationUpdates(locationCallback)
        Log.d("LocationService", "Servicio detenido (parada o tiempo excedido)")
    }

    /**
     * Envia un broadcast local per notificar que la ruta ha estat finalitzada autom√†ticament,
     * √∫til per alertar el ViewModel o la pantalla principal.
     */
    private fun sendFinalizationBroadcast() {
        val intent = Intent("com.entrebicis.RUTA_FINALITZADA_AUTO")
        intent.setPackage(packageName)
        intent.flags = Intent.FLAG_INCLUDE_STOPPED_PACKAGES
        Log.d("LOCATION_SERVICE", "üì° Broadcast enviat amb package: $packageName")
        sendBroadcast(intent)
    }
}